{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#AI packages\n",
    "\n",
    "from PIL import Image\n",
    "from keras.preprocessing import image\n",
    "from keras.models import load_model\n",
    "from keras.layers import Dense\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import pickle\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from python_speech_features import mfcc\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout\n",
    "from keras.models import Sequential\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "import pylab\n",
    "import librosa\n",
    "import numpy as np\n",
    "import os\n",
    "from matplotlib import cm\n",
    "from tqdm import tqdm\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras import layers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5371\n"
     ]
    }
   ],
   "source": [
    "path = os.getcwd() #current working directory\n",
    "\n",
    "rawdf = pd.read_excel(path+'/1selcleakdata.xlsx') #load csv file \n",
    "\n",
    "print(len(rawdf)) #length of rawdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5371/5371 [00:09<00:00, 546.71it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[array([ 0.02032471, -0.00753784, -0.0178833 , ..., -0.06256104,\n",
      "       -0.05389404, -0.01464844], dtype=float32)\n",
      "  22050]\n",
      " [array([ 0.01727295,  0.01202393,  0.01269531, ...,  0.00198364,\n",
      "       -0.00439453, -0.01126099], dtype=float32)\n",
      "  22050]\n",
      " [array([ 0.01629639,  0.01965332,  0.01803589, ...,  0.00021362,\n",
      "       -0.00012207,  0.00045776], dtype=float32)\n",
      "  22050]\n",
      " ...\n",
      " [array([ 8.5449219e-04, -6.1035156e-05, -2.4414062e-04, ...,\n",
      "       -1.8310547e-04, -4.2724609e-04, -4.2724609e-04], dtype=float32)\n",
      "  22050]\n",
      " [array([ 0.00036621,  0.00082397,  0.00073242, ...,  0.00140381,\n",
      "        0.0010376 , -0.00030518], dtype=float32)\n",
      "  22050]\n",
      " [array([ 0.00286865,  0.00375366,  0.00357056, ..., -0.00036621,\n",
      "       -0.00036621,  0.00064087], dtype=float32)\n",
      "  22050]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "<ipython-input-3-df2891a8d44d>:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
      "  audio_data = np.array(audio_data)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "audio_data = list() #empty list \n",
    "for i in tqdm(range(rawdf.shape[0])):\n",
    "    audio_data.append(librosa.load(os.path.join(path,rawdf['fname'].iloc[i]))) #signal data + samplerate(22050) using librosa package\n",
    "audio_data = np.array(audio_data)\n",
    "\n",
    "print(audio_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fname</th>\n",
       "      <th>label</th>\n",
       "      <th>audio_waves</th>\n",
       "      <th>samplerate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38924_20210601_09_57_35_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.020324707, -0.007537842, -0.0178833, -0.024...</td>\n",
       "      <td>22050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38925_20210601_10_00_35_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.01727295, 0.012023926, 0.0126953125, 0.0130...</td>\n",
       "      <td>22050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38926_20210601_10_01_57_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.016296387, 0.01965332, 0.018035889, 0.01998...</td>\n",
       "      <td>22050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38932_20210601_10_15_32_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.075927734, -0.040130615, -0.124420166, -0.0...</td>\n",
       "      <td>22050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38933_20210601_10_20_51_128_undefined.wav</td>\n",
       "      <td>undefined</td>\n",
       "      <td>[0.015197754, 0.01574707, 0.015045166, 0.01467...</td>\n",
       "      <td>22050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       fname      label  \\\n",
       "0          38924_20210601_09_57_35_128_L.wav          L   \n",
       "1          38925_20210601_10_00_35_128_L.wav          L   \n",
       "2          38926_20210601_10_01_57_128_L.wav          L   \n",
       "3          38932_20210601_10_15_32_128_L.wav          L   \n",
       "4  38933_20210601_10_20_51_128_undefined.wav  undefined   \n",
       "\n",
       "                                         audio_waves samplerate  \n",
       "0  [0.020324707, -0.007537842, -0.0178833, -0.024...      22050  \n",
       "1  [0.01727295, 0.012023926, 0.0126953125, 0.0130...      22050  \n",
       "2  [0.016296387, 0.01965332, 0.018035889, 0.01998...      22050  \n",
       "3  [0.075927734, -0.040130615, -0.124420166, -0.0...      22050  \n",
       "4  [0.015197754, 0.01574707, 0.015045166, 0.01467...      22050  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = rawdf.copy() #copy rawdata\n",
    "\n",
    "df['audio_waves'] = audio_data[:,0] #signal data\n",
    "df['samplerate'] = audio_data[:,1] #samplerate data \n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fname</th>\n",
       "      <th>label</th>\n",
       "      <th>audio_waves</th>\n",
       "      <th>samplerate</th>\n",
       "      <th>bit_lengths</th>\n",
       "      <th>second_lengths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38924_20210601_09_57_35_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.020324707, -0.007537842, -0.0178833, -0.024...</td>\n",
       "      <td>22050</td>\n",
       "      <td>110250</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38925_20210601_10_00_35_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.01727295, 0.012023926, 0.0126953125, 0.0130...</td>\n",
       "      <td>22050</td>\n",
       "      <td>110250</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38926_20210601_10_01_57_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.016296387, 0.01965332, 0.018035889, 0.01998...</td>\n",
       "      <td>22050</td>\n",
       "      <td>110250</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38932_20210601_10_15_32_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.075927734, -0.040130615, -0.124420166, -0.0...</td>\n",
       "      <td>22050</td>\n",
       "      <td>110250</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38933_20210601_10_20_51_128_undefined.wav</td>\n",
       "      <td>undefined</td>\n",
       "      <td>[0.015197754, 0.01574707, 0.015045166, 0.01467...</td>\n",
       "      <td>22050</td>\n",
       "      <td>110250</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5366</th>\n",
       "      <td>82593_20211016_14_56_55_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.03491211, 0.041229248, 0.04663086, 0.054412...</td>\n",
       "      <td>22050</td>\n",
       "      <td>66150</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5367</th>\n",
       "      <td>82594_20211016_14_57_38_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[-0.1244812, -0.11431885, -0.10385132, -0.0925...</td>\n",
       "      <td>22050</td>\n",
       "      <td>66150</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5368</th>\n",
       "      <td>82595_20211016_14_58_35_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.0008544922, -6.1035156e-05, -0.00024414062,...</td>\n",
       "      <td>22050</td>\n",
       "      <td>66150</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5369</th>\n",
       "      <td>82596_20211016_15_02_55_128_undefined.wav</td>\n",
       "      <td>undefined</td>\n",
       "      <td>[0.00036621094, 0.0008239746, 0.0007324219, -0...</td>\n",
       "      <td>22050</td>\n",
       "      <td>66150</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5370</th>\n",
       "      <td>82598_20211016_15_04_05_128_L.wav</td>\n",
       "      <td>L</td>\n",
       "      <td>[0.0028686523, 0.003753662, 0.0035705566, 0.00...</td>\n",
       "      <td>22050</td>\n",
       "      <td>66150</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5371 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          fname      label  \\\n",
       "0             38924_20210601_09_57_35_128_L.wav          L   \n",
       "1             38925_20210601_10_00_35_128_L.wav          L   \n",
       "2             38926_20210601_10_01_57_128_L.wav          L   \n",
       "3             38932_20210601_10_15_32_128_L.wav          L   \n",
       "4     38933_20210601_10_20_51_128_undefined.wav  undefined   \n",
       "...                                         ...        ...   \n",
       "5366          82593_20211016_14_56_55_128_L.wav          L   \n",
       "5367          82594_20211016_14_57_38_128_L.wav          L   \n",
       "5368          82595_20211016_14_58_35_128_L.wav          L   \n",
       "5369  82596_20211016_15_02_55_128_undefined.wav  undefined   \n",
       "5370          82598_20211016_15_04_05_128_L.wav          L   \n",
       "\n",
       "                                            audio_waves samplerate  \\\n",
       "0     [0.020324707, -0.007537842, -0.0178833, -0.024...      22050   \n",
       "1     [0.01727295, 0.012023926, 0.0126953125, 0.0130...      22050   \n",
       "2     [0.016296387, 0.01965332, 0.018035889, 0.01998...      22050   \n",
       "3     [0.075927734, -0.040130615, -0.124420166, -0.0...      22050   \n",
       "4     [0.015197754, 0.01574707, 0.015045166, 0.01467...      22050   \n",
       "...                                                 ...        ...   \n",
       "5366  [0.03491211, 0.041229248, 0.04663086, 0.054412...      22050   \n",
       "5367  [-0.1244812, -0.11431885, -0.10385132, -0.0925...      22050   \n",
       "5368  [0.0008544922, -6.1035156e-05, -0.00024414062,...      22050   \n",
       "5369  [0.00036621094, 0.0008239746, 0.0007324219, -0...      22050   \n",
       "5370  [0.0028686523, 0.003753662, 0.0035705566, 0.00...      22050   \n",
       "\n",
       "      bit_lengths second_lengths  \n",
       "0          110250            5.0  \n",
       "1          110250            5.0  \n",
       "2          110250            5.0  \n",
       "3          110250            5.0  \n",
       "4          110250            5.0  \n",
       "...           ...            ...  \n",
       "5366        66150            3.0  \n",
       "5367        66150            3.0  \n",
       "5368        66150            3.0  \n",
       "5369        66150            3.0  \n",
       "5370        66150            3.0  \n",
       "\n",
       "[5371 rows x 6 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df.copy() \n",
    "\n",
    "bit_lengths = list() #empty list for no of bits \n",
    "for i in range(df2.shape[0]):\n",
    "    bit_lengths.append(len(df2['audio_waves'].iloc[i]))  #bit_lengths \n",
    "bit_lengths = np.array(bit_lengths)\n",
    "\n",
    "\n",
    "#regularization \n",
    "\n",
    "for i in range(len(bit_lengths)):\n",
    "    if (bit_lengths[i]  >= 110250) & (bit_lengths[i] < 132300): #5 seconds\n",
    "        bit_lengths[i] =  110250 \n",
    "        \n",
    "    elif (bit_lengths[i]   >= 88200) & (bit_lengths[i]  < 110250): #4 seconds\n",
    "         bit_lengths[i] = 88200    \n",
    "    \n",
    "    elif (bit_lengths[i]  >= 66150) & (bit_lengths[i]  < 88200): #3 seconds\n",
    "        bit_lengths[i] = 66150\n",
    "\n",
    "    elif (bit_lengths[i]  >= 44100) & (bit_lengths[i]  < 66150): #2 seconds\n",
    "        bit_lengths[i] = 44100\n",
    "    \n",
    "    else:\n",
    "        bit_lengths[i] = bit_lengths[i]\n",
    "        \n",
    "df2['bit_lengths'] = bit_lengths \n",
    "\n",
    "df2['second_lengths'] = df2['bit_lengths']/df2['samplerate']  #no of bits / samplerate = audio length(s)\n",
    "df2\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = df2.copy()\n",
    "\n",
    "df3 = df3[df3['second_lengths'] >=3] #use at least over 3 seconds audio data\n",
    "\n",
    "df3 = df3.reset_index(drop=True)\n",
    "\n",
    "df3\n",
    "\n",
    "df3.to_excel(\"zzxcvcxv.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mfcc_labels = list() #empty list for audio data label: L = leak, U = undefined(no leak)\n",
    "\n",
    "\n",
    "for i in (range(len(df3['audio_waves']))):\n",
    "        mfcc_labels.append(df3['label'][i])\n",
    "\n",
    "\n",
    "mfcc_labels = pd.DataFrame(mfcc_labels)\n",
    "\n",
    "print(mfcc_labels[0][77])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####draw mel-spectrogram #######################\n",
    "\n",
    "mfcc_features = list() #empty list for mfcc data\n",
    "\n",
    "for i in tqdm(range(len(df3['audio_waves']))):\n",
    "    mfcc_features.append(mfcc(df3['audio_waves'][i]))\n",
    "    \n",
    "\n",
    "    #draw mel-spectrogram\n",
    "    M = librosa.feature.melspectrogram(df3['audio_waves'][i], sr = 22050, fmax = 2800, #max hz\n",
    "                                            n_fft=2048, #음성의 길이를 얼마만큼 자를 것인지\n",
    "                                            hop_length=512, #얼마만큼 시간주기를 이동하면서 분석할것인지 \n",
    "                                            n_mels = 96, #칼라맵의 해상도 \n",
    "                                            power = 2) #default value \n",
    "\n",
    "    log_power = librosa.power_to_db(M, ref=np.max)  #log scale \n",
    "            \n",
    "    # plotting the leak/noleak spectrogram and save as png file (just the image)\n",
    "    pylab.figure(figsize=(3,3))\n",
    "    pylab.axis('off') #no x or y axis\n",
    "    pylab.axes([0., 0., 1., 1.], frameon=False, xticks=[], yticks=[]) # Remove the white edge\n",
    "    librosa.display.specshow(log_power, cmap=cm.jet)\n",
    "    pylab.savefig(str(df3['label'][i]) + df3['fname'][i] + str(i)  +'.png', bbox_inches=None, pad_inches=0)\n",
    "    #pylab.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check \n",
    "\n",
    "filename = 'C:/Users/user/Desktop/210905_CNN(50~2800)/code/audiodata/38971_20210601_12_56_47_129_undefined.wav' #local dir\n",
    "audio = librosa.load(filename)\n",
    "\n",
    "\n",
    "M = librosa.feature.melspectrogram(audio[0], sr = 22050, fmax = 22050/2, \n",
    "                                            n_fft=2048, \n",
    "                                            hop_length=512, \n",
    "                                            n_mels = 96, \n",
    "                                            power = 2) \n",
    "\n",
    "\n",
    "# power to db (log로)\n",
    "log_power = librosa.power_to_db(M, ref=np.max) \n",
    "\n",
    "pylab.figure(figsize=(3,3))\n",
    "pylab.axis('off') \n",
    "pylab.axes([0., 0., 1., 1.], frameon=False, xticks=[], yticks=[]) # Remove the white edge\n",
    "librosa.display.specshow(log_power, cmap=cm.jet)\n",
    "\n",
    "#plt.savefig(str(filename[0:5])+'.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "6d46af94c2bbce495f1e668725902fa517c90b1782bcfe2fce0dd9868df553d3"
  },
  "kernelspec": {
   "display_name": "Python 3.8.8 64-bit ('base': conda)",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "orig_nbformat": 3
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
